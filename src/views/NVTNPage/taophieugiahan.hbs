<!-- filepath: d:\NAM3_HK2\PTTKHTTT\Project\DoAnPTTK_GD2_SQL\src\views\NVTNPage\chitietgiahan.hbs -->
<script src="https://cdn.tailwindcss.com"></script>

<div class="bg-gray-100 min-h-screen py-8">
    <div class="max-w-2xl mx-auto px-4">
        <!-- Title -->
        <h1 class="text-3xl font-bold text-gray-800 text-center mb-8">
            Tạo phiếu gia hạn mới
        </h1>
        
        <div class="mb-8">
            <div class="relative max-w-md mx-auto">
                <input 
                    type="text" 
                    placeholder="Nhập SBD để tìm kiếm thí sinh"
                    class="w-full pl-4 pr-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                    id="searchInput"
                >
                <button 
                    type="button"
                    onclick="searchStudent()"
                    class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700"
                >
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                </button>
            </div>
        </div>
        
        <!-- Student and Exam Information Section -->
        <div class="bg-white rounded-lg border border-gray-300 overflow-hidden mb-6" id="studentInfoSection" {{#if isNewExtension}}style="display: none;"{{/if}}>
            <!-- Section Header -->
            <div class="bg-gradient-to-r from-blue-200 to-blue-300 px-6 py-4">
                <h2 class="text-lg font-semibold text-gray-800 text-center">
                    Thông tin thí sinh và kì thi
                </h2>
            </div>
            
            <!-- Section Content -->
            <div class="p-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="flex">
                        <span class="font-semibold text-gray-700 text-sm min-w-fit mr-2">SBD:</span>
                        <span class="text-gray-600 text-sm" id="displaySbd">{{chiTietGiaHan.sbd}}</span>
                    </div>
                    <div class="flex">
                        <span class="font-semibold text-gray-700 text-sm min-w-fit mr-2">Mã bài thi:</span>
                        <span class="text-gray-600 text-sm" id="displayMaBaiThi">{{chiTietGiaHan.maBaiThi}}</span>
                    </div>
                    <div class="flex">
                        <span class="font-semibold text-gray-700 text-sm min-w-fit mr-2">Mã thí sinh:</span>
                        <span class="text-gray-600 text-sm" id="displayMaThiSinh">{{chiTietGiaHan.maThiSinh}}</span>
                    </div>
                    <div class="flex">
                        <span class="font-semibold text-gray-700 text-sm min-w-fit mr-2">Ngày thi cũ:</span>
                        <span class="text-gray-600 text-sm" id="displayNgayThiCu">{{chiTietGiaHan.ngayThiCu}}</span>
                    </div>
                    <div class="flex">
                        <span class="font-semibold text-gray-700 text-sm min-w-fit mr-2">CCCD:</span>
                        <span class="text-gray-600 text-sm" id="displayCccd">{{chiTietGiaHan.cccd}}</span>
                    </div>
                    <div class="flex">
                        <span class="font-semibold text-gray-700 text-sm min-w-fit mr-2">Giờ thi cũ:</span>
                        <span class="text-gray-600 text-sm" id="displayGioThiCu">{{chiTietGiaHan.gioThiCu}}</span>
                    </div>
                    <div class="flex">
                        <span class="font-semibold text-gray-700 text-sm min-w-fit mr-2">Họ tên:</span>
                        <span class="text-gray-600 text-sm" id="displayHoTen">{{chiTietGiaHan.hoTen}}</span>
                    </div>
                    <div class="flex">
                        <span class="font-semibold text-gray-700 text-sm min-w-fit mr-2">Địa điểm cũ:</span>
                        <span class="text-gray-600 text-sm" id="displayDiaDiemCu">{{chiTietGiaHan.diaDiemCu}}</span>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Extension Request Information Section -->
        <div class="bg-white rounded-lg border border-gray-300 overflow-hidden mb-8" id="extensionFormSection" {{#if isNewExtension}}style="display: none;"{{/if}}>
            <!-- Section Header -->
            <div class="bg-gradient-to-r from-blue-200 to-blue-300 px-6 py-4">
                <h2 class="text-lg font-semibold text-gray-800 text-center">
                    Thông tin yêu cầu gia hạn
                </h2>
            </div>
            
            <!-- Section Content -->
            <div class="p-6">     
                <form id="extensionForm">
                    <!-- Hidden fields -->
                    <input type="hidden" id="extensionId" value="{{chiTietGiaHan.id}}">
                    <input type="hidden" id="studentData" value="">
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                        
                        <!-- Khi tạo mới: Chỉ hiển thị dropdown -->
                        <div>
                            <label for="extensionType" class="block text-sm font-medium text-gray-700 mb-2">
                                Loại gia hạn <span class="text-red-500">*</span>
                            </label>
                            <select 
                                id="extensionType" 
                                name="extensionType"
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                                required
                                onchange="updateExtensionReason()"
                            >
                                <option value="">-- Chọn loại gia hạn --</option>
                                <option value="Bình Thường">Bình Thường</option>
                                <option value="Đặc biệt">Đặc biệt</option>
                            </select>
                        </div>
                        
                        <!-- Hidden input để lưu lý do gia hạn (sẽ được cập nhật tự động) -->
                        <input type="hidden" id="extensionReason" name="extensionReason" value="">
                        
                        <!-- Khi xem chi tiết: Hiển thị thông tin dạng text -->
                        
                        
                        <div>
                            <label for="replacementDate" class="block text-sm font-medium text-gray-700 mb-2">
                                Ngày thay thế {{#if isNewExtension}}<span class="text-red-500">*</span>{{/if}}
                            </label>
                            {{#if isNewExtension}}
                            <input 
                                type="text" 
                                id="replacementDate" 
                                name="replacementDate"
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                                required
                            >
                            <small class="text-gray-500 text-xs mt-1">Chọn ngày thi thay thế</small>
                            {{else}}
                            <div class="w-full px-3 py-2 border border-gray-200 rounded-md bg-gray-50 text-gray-700">
                                <input 
                                    type="text" 
                                    id="replacementDate" 
                                    name="replacementDate"
                                    required
                                    value="{{chiTietGiaHan.ngayThayThe}}"
                                    readonly
                                >
                            </div>
                            {{/if}}
                        </div>
                    </div>
                    
                    <!-- View Schedule Button -->
                    <div class="flex justify-center mb-6">
                        <button 
                            type="button"
                            onclick="viewSchedule()"
                            class="bg-blue-500 hover:bg-blue-600 text-white font-medium px-6 py-2 rounded-md transition-colors duration-200 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 outline-none"
                        >
                            <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            Xem lịch thi
                        </button>
                    </div>
                </form>
            </div>
        </div>
        
        <!-- Action Buttons -->
        <div class="flex justify-center gap-4" id="actionButtons" {{#if isNewExtension}}style="display: none;"{{/if}}>
            
            <button 
                type="button"
                onclick="createExtension()"
                class="bg-green-600 hover:bg-green-700 text-white font-medium px-8 py-3 rounded-md transition-colors duration-200 focus:ring-2 focus:ring-green-500 focus:ring-offset-2 outline-none"
            >
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                </svg>
                Tạo phiếu gia hạn
            </button>
            
            
            
            <button 
                type="button"
                onclick="cancelExtension()"
                class="bg-gray-400 hover:bg-gray-500 text-white font-medium px-8 py-3 rounded-md transition-colors duration-200 focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 outline-none"
            >
                Quay lại
            </button>
        </div>
    </div>
    <!-- Schedule Selection Dialog -->
    <div id="scheduleDialog" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-lg shadow-xl w-full max-w-6xl max-h-[85vh] flex flex-col">
                <!-- Dialog Header -->
                <div class="bg-gradient-to-r from-blue-500 to-blue-600 text-white p-4 rounded-t-lg">
                    <div class="flex justify-between items-center">
                        <h3 class="text-lg font-semibold">Chọn lịch thi thay thế</h3>
                        <button onclick="closeScheduleDialog()" class="text-white hover:text-gray-300">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                </div>
                
                <!-- Dialog Body -->
                <div class="flex-1 overflow-hidden flex flex-col">
                    <!-- Loading State -->
                    <div id="scheduleLoading" class="flex-1 flex items-center justify-center">
                        <div class="text-center py-8">
                            <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
                            <p class="mt-2 text-gray-600">Đang tải danh sách lịch thi...</p>
                        </div>
                    </div>
                    
                    <!-- Content State -->
                    <div id="scheduleContent" class="hidden flex-1 flex flex-col">
                        <!-- Table Header -->
                        <div class="bg-gray-50 p-4 border-b">
                            <div class="grid grid-cols-5 gap-4 font-semibold text-gray-700 text-sm">
                                <div>Mã bài thi</div>
                                <div>Ngày thi</div>
                                <div>Giờ thi</div>
                                <div>Địa điểm</div>
                                <div>Chứng chỉ</div>
                            </div>
                        </div>
                        
                        <!-- Table Body - Scrollable -->
                        <div class="flex-1 overflow-y-auto">
                            <div id="scheduleList">
                                <!-- Schedule items will be populated here -->
                            </div>
                        </div>
                        
                        <!-- Pagination -->
                        <div id="schedulePagination" class="border-t bg-gray-50 p-4">
                            <div class="flex items-center justify-between">
                                <div class="text-sm text-gray-600" id="paginationInfo">
                                    <!-- Pagination info will be populated here -->
                                </div>
                                <div class="flex gap-2" id="paginationButtons">
                                    <!-- Pagination buttons will be populated here -->
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Error State -->
                    <div id="scheduleError" class="flex-1 flex items-center justify-center hidden">
                        <div class="text-center py-8">
                            <p class="text-red-600 mb-4">Có lỗi xảy ra khi tải danh sách lịch thi</p>
                            <button onclick="loadScheduleData(1)" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                                Thử lại
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Dialog Footer -->
                <div class="bg-gray-50 px-4 py-3 rounded-b-lg border-t">
                    <div class="flex justify-end">
                        <button onclick="closeScheduleDialog()" 
                                class="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400">
                            Hủy
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
const isNewExtension = {{#if isNewExtension}}true{{else}}false{{/if}};
let studentData = null;
let idBaiThi = '{{chiTietGiaHan.maBaiThi}}';

async function searchStudent() {
    const searchValue = document.getElementById('searchInput').value.trim();
    console.log('Searching for student with SBD:', searchValue);
    if (!searchValue) {
        alert('Vui lòng nhập SBD để tìm kiếm');
        return;
    }
    
    const button = event.target;
    const originalHtml = button.innerHTML;
    button.innerHTML = '<div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>';
    button.disabled = true;
    
    try {
        const response = await fetch(`/NVTN/api/thisinh/tim-thi-sinh/${searchValue}`);
        const result = await response.json();
        
        if (!response.ok || !result.success) {
            throw new Error(result.message || 'Không tìm thấy thông tin thí sinh');
        }
        
        // ** KIỂM TRA VALIDATION DUY NHẤT Ở ĐÂY **
        if (result.validation && !result.validation.isValid) {
            let errorMessage = 'Không thể tạo phiếu gia hạn cho SBD này:\n\n';
            result.validation.errors.forEach(error => {
                errorMessage += '• ' + error.message + '\n';
            });
            
            alert(errorMessage);
            return; // DỪNG WORKFLOW TẠI ĐÂY
        }
        
        // Hiển thị cảnh báo nhẹ nếu gần hết lượt
        if (result.validation && result.validation.soLanGiaHanHienTai >= 1) {
            const soLanConLai = 2 - result.validation.soLanGiaHanHienTai;
            alert(`Lưu ý: Khách hàng đã gia hạn ${result.validation.soLanGiaHanHienTai} lần. Còn ${soLanConLai} lần.`);
        }
        
        // Nếu validation PASS → CHO PHÉP TIẾP TỤC
        studentData = result.data;
        studentData.validation = result.validation; // Lưu validation info để dùng sau
        displayStudentInfo(studentData);
        
    } catch (error) {
        console.error('Lỗi tìm kiếm:', error);
        alert(error.message || 'Không tìm thấy thông tin thí sinh với SBD này');
    } finally {
        button.innerHTML = originalHtml;
        button.disabled = false;
    }
}

function displayStudentInfo(data) {
    // Update display fields
    document.getElementById('displaySbd').textContent = data.sbd || '-';
    document.getElementById('displayMaBaiThi').textContent = data.maBaiThi || '-';
    document.getElementById('displayMaThiSinh').textContent = data.maThiSinh || '-';
    document.getElementById('displayNgayThiCu').textContent = data.ngayThiCu || '-';
    document.getElementById('displayCccd').textContent = data.cccd || '-';
    document.getElementById('displayGioThiCu').textContent = data.gioThiCu || '-';
    document.getElementById('displayHoTen').textContent = data.hoTen || '-';
    document.getElementById('displayDiaDiemCu').textContent = data.diaDiemCu || '-';
    
    // Store student data
    document.getElementById('studentData').value = JSON.stringify(data);
    
    // Show form sections
    document.getElementById('studentInfoSection').style.display = 'block';
    document.getElementById('extensionFormSection').style.display = 'block';
    document.getElementById('actionButtons').style.display = 'flex';
    
    // Set minimum date for replacement date
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    document.getElementById('replacementDate').min = tomorrow.toISOString().split('T')[0];
}
let currentChungChiID = null;
function viewSchedule() {
    const extensionId = document.getElementById('extensionId').value;
    
    // Nếu đang tạo mới và đã tìm thấy thí sinh, lấy chứng chỉ ID của thí sinh đó
    if (isNewExtension && studentData) {
        getChungChiIDAndShowSchedule(extensionId);
        return;
    }
    
    // Nếu đang xem chi tiết phiếu gia hạn có sẵn, lấy SBD từ thông tin hiển thị
    if (!isNewExtension) {
        const sbd = document.getElementById('displaySbd').textContent.trim();
        if (sbd && sbd !== '-') {
            getChungChiIDFromSBDAndShowSchedule(sbd, extensionId);
            return;
        }
    }
    
    // Fallback: hiển thị tất cả lịch thi
    currentChungChiID = null;
    showScheduleDialog();
}

async function getChungChiIDAndShowSchedule(extensionId) {
    try {
        const sbd = document.getElementById('searchInput').value.trim();
        
        // Gọi API để lấy chứng chỉ ID
        const response = await fetch(`/NVTN/api/thisinh/lay-chung-chi/${sbd}`);
        const result = await response.json();
        
        if (result.success && result.chungChiID) {
            currentChungChiID = result.chungChiID;
        } else {
            currentChungChiID = null;
        }
        
        showScheduleDialog();
        
    } catch (error) {
        console.error('Error getting chungChiID:', error);
        currentChungChiID = null;
        showScheduleDialog();
    }
}

async function getChungChiIDFromSBDAndShowSchedule(sbd, extensionId) {
    try {
        // Gọi API để lấy chứng chỉ ID từ SBD
        const response = await fetch(`/NVTN/api/thisinh/lay-chung-chi/${sbd}`);
        const result = await response.json();
        
        if (result.success && result.chungChiID) {
            currentChungChiID = result.chungChiID;
        } else {
            currentChungChiID = null;
        }
        
        showScheduleDialog();
        
    } catch (error) {
        console.error('Error getting chungChiID from SBD:', error);
        currentChungChiID = null;
        showScheduleDialog();
    }
}

// Hiển thị dialog và tải dữ liệu
function showScheduleDialog() {
    document.getElementById('scheduleDialog').classList.remove('hidden');
    document.body.style.overflow = 'hidden';
    currentPage = 1; // Reset về trang đầu
    loadScheduleData(1);
}
// Đóng dialog
function closeScheduleDialog() {
    document.getElementById('scheduleDialog').classList.add('hidden');
    document.body.style.overflow = 'auto'; // Restore body scroll
}
// Tải dữ liệu lịch thi với phân trang
async function loadScheduleData(page = 1) {
    const loadingEl = document.getElementById('scheduleLoading');
    const contentEl = document.getElementById('scheduleContent');
    const errorEl = document.getElementById('scheduleError');
    
    // Show loading
    loadingEl.classList.remove('hidden');
    contentEl.classList.add('hidden');
    errorEl.classList.add('hidden');
    
    try {
        let apiUrl = `/NVTN/lichthi/api/lichthi?page=${page}&limit=10`;
        if (currentChungChiID) {
            apiUrl += `&chungChiID=${currentChungChiID}`;
        }
        console.log('Loading schedule data from:', apiUrl);
        const response = await fetch(apiUrl);
        const result = await response.json();
        
        if (!response.ok || !result.success) {
            throw new Error(result.message || 'Không thể tải danh sách lịch thi');
        }
        
        currentPage = page;
        currentPagination = result.pagination;
        totalPages = result.pagination.totalPages;
        
        displayScheduleData(result.data);
        displayPagination(result.pagination);
        
        // Show content
        loadingEl.classList.add('hidden');
        contentEl.classList.remove('hidden');
        
    } catch (error) {
        console.error('Error loading schedule data:', error);
        
        // Show error
        loadingEl.classList.add('hidden');
        errorEl.classList.remove('hidden');
    }
}
// Hiển thị dữ liệu lịch thi trong table format
function displayScheduleData(scheduleData) {
    const scheduleList = document.getElementById('scheduleList');
    
    if (!scheduleData || scheduleData.length === 0) {
        scheduleList.innerHTML = `
            <div class="text-center py-12 text-gray-500">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                </svg>
                <p class="mt-2">Không có lịch thi phù hợp</p>
            </div>
        `;
        return;
    }
    
    scheduleList.innerHTML = scheduleData.map((schedule, index) => `
        <div class="border-b border-gray-200 hover:bg-blue-50 cursor-pointer transition-colors schedule-item p-4" 
             onclick="selectSchedule(${JSON.stringify(schedule).replace(/"/g, '&quot;')})">
            <div class="grid grid-cols-5 gap-4 items-center">
                <div>
                    <div class="font-semibold text-blue-600 text-sm">${schedule.maBaiThi}</div>
                </div>
                <div>
                    <div class="font-medium text-gray-900 text-sm">${schedule.ngayThi}</div>
                </div>
                <div>
                    <div class="text-gray-700 text-sm">${schedule.gioThi}</div>
                </div>
                <div>
                    <div class="text-gray-700 text-sm">${schedule.diaDiem}</div>
                </div>
                <div>
                    ${schedule.tenChungChi ? `
                        <span class="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">
                            ${schedule.tenChungChi}
                        </span>
                    ` : `
                        <span class="text-gray-400 text-xs">-</span>
                    `}
                </div>
            </div>
        </div>
    `).join('');
}
// Hiển thị phân trang
function displayPagination(pagination) {
    const paginationInfo = document.getElementById('paginationInfo');
    const paginationButtons = document.getElementById('paginationButtons');
    
    // Hiển thị thông tin phân trang
    const startItem = (pagination.currentPage - 1) * pagination.itemsPerPage + 1;
    const endItem = Math.min(pagination.currentPage * pagination.itemsPerPage, pagination.totalItems);
    
    paginationInfo.innerHTML = `
        Hiển thị ${startItem}-${endItem} trong tổng số ${pagination.totalItems} lịch thi
    `;
    
    // Tạo buttons phân trang
    let buttonsHtml = '';
    
    // Previous button
    if (pagination.hasPrev) {
        buttonsHtml += `
            <button onclick="loadScheduleData(${pagination.currentPage - 1})" 
                    class="px-3 py-1 bg-white border border-gray-300 rounded text-sm hover:bg-gray-50">
                ‹ Trước
            </button>
        `;
    } else {
        buttonsHtml += `
            <button disabled class="px-3 py-1 bg-gray-100 border border-gray-300 rounded text-sm text-gray-400 cursor-not-allowed">
                ‹ Trước
            </button>
        `;
    }
    
    // Page numbers
    const maxPagesToShow = 5;
    let startPage = Math.max(1, pagination.currentPage - Math.floor(maxPagesToShow / 2));
    let endPage = Math.min(pagination.totalPages, startPage + maxPagesToShow - 1);
    
    // Adjust startPage if we're near the end
    if (endPage - startPage < maxPagesToShow - 1) {
        startPage = Math.max(1, endPage - maxPagesToShow + 1);
    }
    
    for (let i = startPage; i <= endPage; i++) {
        if (i === pagination.currentPage) {
            buttonsHtml += `
                <button class="px-3 py-1 bg-blue-500 text-white border border-blue-500 rounded text-sm">
                    ${i}
                </button>
            `;
        } else {
            buttonsHtml += `
                <button onclick="loadScheduleData(${i})" 
                        class="px-3 py-1 bg-white border border-gray-300 rounded text-sm hover:bg-gray-50">
                    ${i}
                </button>
            `;
        }
    }
    
    // Next button
    if (pagination.hasNext) {
        buttonsHtml += `
            <button onclick="loadScheduleData(${pagination.currentPage + 1})" 
                    class="px-3 py-1 bg-white border border-gray-300 rounded text-sm hover:bg-gray-50">
                Sau ›
            </button>
        `;
    } else {
        buttonsHtml += `
            <button disabled class="px-3 py-1 bg-gray-100 border border-gray-300 rounded text-sm text-gray-400 cursor-not-allowed">
                Sau ›
            </button>
        `;
    }
    
    paginationButtons.innerHTML = buttonsHtml;
}
// Chọn lịch thi
function selectSchedule(scheduleData) {
    // Đóng dialog
    closeScheduleDialog();

    // Cập nhật form với dữ liệu đã chọn
    updateFormWithSchedule(scheduleData);
}
// Cập nhật form với dữ liệu lịch thi đã chọn (giữ nguyên function cũ)
let maBaiThi = '';
function updateFormWithSchedule(scheduleData) {
    const replacementBaiThiID = document.getElementById('replacementBaiThiId');
    const replacementDateField = document.getElementById('replacementDate');

    const dateParts = scheduleData.ngayThi.split('/');
    if (dateParts.length === 3) {
        const formattedDate = `${dateParts[2]}-${dateParts[1].padStart(2, '0')}-${dateParts[0].padStart(2, '0')}`;
        replacementDateField.value = formattedDate;
    }
    
    idBaiThi = scheduleData.id || '';
    
    // Hiển thị thông báo
    maBaiThi = scheduleData.maBaiThi || '';
    alert(`Đã chọn lịch thi:\nMã bài thi: ${scheduleData.maBaiThi}\nNgày: ${scheduleData.ngayThi}\nGiờ: ${scheduleData.gioThi}\nĐịa điểm: ${scheduleData.diaDiem}`);
}
// Xử lý đóng dialog khi click outside
document.addEventListener('DOMContentLoaded', function() {
    const dialog = document.getElementById('scheduleDialog');
    if (dialog) {
        dialog.addEventListener('click', function(e) {
            if (e.target === dialog) {
                closeScheduleDialog();
            }
        });
    }
    
    // Xử lý ESC key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && !dialog.classList.contains('hidden')) {
            closeScheduleDialog();
        }
    });
});
async function createExtension() {
    // Validate form input cơ bản
    const extensionType = document.getElementById('extensionType').value;
    const replacementDate = document.getElementById('replacementDate').value;
    
    if (!extensionType) {
        alert('Vui lòng chọn loại gia hạn');
        return;
    }
    
    if (!replacementDate) {
        alert('Vui lòng chọn ngày thay thế');
        return;
    }
    
    // Validation ngày (cơ bản)
    const selectedDate = new Date(replacementDate);
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    if (selectedDate <= today) {
        alert('Ngày thay thế phải sau ngày hôm nay');
        return;
    }
    
    const button = event.target;
    const originalHtml = button.innerHTML;
    button.innerHTML = 'Đang tạo...';
    button.disabled = true;
    console.log(studentData);
    try {
        // ** GỌI API TẠO - KHÔNG CẦN VALIDATION THÊM **
        const response = await fetch('/NVTN/quanligiahan/tao', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                sbd: studentData.sbd,
                maBaiThi: maBaiThi || '',
                loaiGiaHan: extensionType,
                ngayThayThe: replacementDate,
                thongTinThiSinh: studentData
            })
        });
        
        const result = await response.json();
        
        if (!response.ok || !result.success) {
            throw new Error(result.error || result.message || 'Không thể tạo phiếu gia hạn');
        }
        
        alert('Tạo phiếu gia hạn thành công!');
        window.location.href = `/NVTN/quanligiahan/chitiet/${result.id}`;
        
    } catch (error) {
        console.error('Lỗi tạo gia hạn:', error);
        alert(error.message || 'Đã xảy ra lỗi khi tạo phiếu gia hạn');
    } finally {
        button.innerHTML = originalHtml;
        button.disabled = false;
    }
}

async function updateExtension() {
    const form = document.getElementById('extensionForm');
    const formData = new FormData(form);
    const extensionId = document.getElementById('extensionId').value;
    
    try {
        console.log(idBaiThi);
        const response = await fetch(`/NVTN/quanligiahan/capnhat/${extensionId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                lichThiId: idBaiThi,
            })
        });
        console.log(response,response.ok)
        if (!response.ok) {
            throw new Error('Không thể cập nhật yêu cầu gia hạn');
        }
        
        alert('Cập nhật thành công!');
        window.location.reload();
        
    } catch (error) {
        console.error('Lỗi cập nhật:', error);
        alert('Đã xảy ra lỗi khi cập nhật');
    }
}

function updateExtensionReason() {
    const extensionType = document.getElementById('extensionType').value;
    const extensionReasonInput = document.getElementById('extensionReason');
    
    if (extensionType === 'Bình Thường') {
        extensionReasonInput.value = 'Bình thường';
    } else if (extensionType === 'Đặc biệt') {
        extensionReasonInput.value = 'Bệnh nặng';
    } else {
        extensionReasonInput.value = '';
    }
}

function cancelExtension() {
    window.location.href = '/NVTN/quanligiahan';
}

// Event listeners
document.addEventListener('DOMContentLoaded', function() {
    // Focus search input if creating new
    if (isNewExtension) {
        const searchInput = document.getElementById('searchInput');
        if (searchInput) searchInput.focus();
    }
});

// Allow search on Enter key
if (isNewExtension) {
    document.getElementById('searchInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            searchStudent();
        }
    });
}
</script>
